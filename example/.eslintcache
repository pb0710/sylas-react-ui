[{"/Users/pb/code/sylas-react-ui/example/src/App.test.tsx":"1","/Users/pb/code/sylas-react-ui/example/src/App.tsx":"2","/Users/pb/code/sylas-react-ui/example/src/examples/ButtonExample.tsx":"3","/Users/pb/code/sylas-react-ui/example/src/examples/FormExample.tsx":"4","/Users/pb/code/sylas-react-ui/example/src/examples/ListExample.tsx":"5","/Users/pb/code/sylas-react-ui/example/src/examples/LoadingExample.tsx":"6","/Users/pb/code/sylas-react-ui/example/src/examples/MenuExample.tsx":"7","/Users/pb/code/sylas-react-ui/example/src/examples/PopupExample.tsx":"8","/Users/pb/code/sylas-react-ui/example/src/examples/TabsExample.tsx":"9","/Users/pb/code/sylas-react-ui/example/src/examples/TagExample.tsx":"10","/Users/pb/code/sylas-react-ui/example/src/hooks.tsx":"11","/Users/pb/code/sylas-react-ui/example/src/index.tsx":"12","/Users/pb/code/sylas-react-ui/example/src/react-app-env.d.ts":"13","/Users/pb/code/sylas-react-ui/example/src/setupTests.ts":"14","/Users/pb/code/sylas-react-ui/example/src/examples/Example.tsx":"15","/Users/pb/code/sylas-react-ui/example/src/markdown/Markdown.tsx":"16"},{"size":243,"mtime":1605520915761,"results":"17","hashOfConfig":"18"},{"size":1633,"mtime":1607002184134,"results":"19","hashOfConfig":"18"},{"size":3825,"mtime":1607006968475,"results":"20","hashOfConfig":"18"},{"size":11129,"mtime":1607006994222,"results":"21","hashOfConfig":"18"},{"size":1572,"mtime":1607006599490,"results":"22","hashOfConfig":"18"},{"size":2295,"mtime":1607007903659,"results":"23","hashOfConfig":"18"},{"size":3543,"mtime":1607007525873,"results":"24","hashOfConfig":"18"},{"size":7658,"mtime":1607007767267,"results":"25","hashOfConfig":"18"},{"size":2748,"mtime":1607007916388,"results":"26","hashOfConfig":"18"},{"size":1875,"mtime":1607008026889,"results":"27","hashOfConfig":"18"},{"size":319,"mtime":1605763060269,"results":"28","hashOfConfig":"18"},{"size":484,"mtime":1605520915749,"results":"29","hashOfConfig":"18"},{"size":40,"mtime":1594372452602,"results":"30","hashOfConfig":"18"},{"size":255,"mtime":1594372452603,"results":"31","hashOfConfig":"18"},{"size":770,"mtime":1607007326003,"results":"32","hashOfConfig":"18"},{"size":1427,"mtime":1609731483679,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m2xy0v",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"/Users/pb/code/sylas-react-ui/example/src/App.test.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/App.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/ButtonExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/FormExample.tsx",["68"],"import * as React from 'react'\nimport {\n\tForm,\n\tInput,\n\tSwitch,\n\tSelect,\n\tButton,\n\tCheckBox,\n\tRadio,\n\tCollapse,\n\tUploader\n} from 'sylas-react-ui'\nimport { ThemeContext } from '../App'\nimport { useVisible } from '../hooks'\nimport { Example } from './Example'\n\nconst codeExample = `\nimport * as React from 'react'\nimport {\n  Form,\n  Input,\n  Switch,\n  Select,\n  Button,\n  CheckBox,\n  Radio,\n  Uploader\n} from 'sylas-react-ui'\n\nfunction FormExample() {\n  const [form] = Form.useForm() // instance is not required for simple form\n  const handleFinsh = (values) => {\n    console.log('submit finshed values:', values)\n  }\n  const handleFail = (errors) => {\n    console.error('submit failed errors:', errors)\n  }\n  const handleValuesChange = (values) => {\n    console.log('values changed', values)\n  }\n  const [check, setCheck] = React.useState(true)\n  const handleToggle = () => {\n    setCheck((oldCheck) => !oldCheck)\n  }\n  const getFileUrl = async (data) => {\n    // do some async request and fetch file url.\n    // example:\n    // const res = await fakeApi(data)\n    // return res.url\n    return 'https://iph.href.lu/200x200?fg=666666&bg=cccccc'\n  }\n\n  return (\n    <div style={{ width: 400, padding: 16 }}>\n      <CheckBox\n        style={{ marginBottom: 16 }}\n        value={check}\n        onValueChange={handleToggle}\n      >\n        Password confirm verify is necessary?\n      </CheckBox>\n      <Form\n        form={form}\n        onFinsh={handleFinsh}\n        onFail={handleFail}\n        onValuesChange={handleValuesChange}\n      >\n        <Form.Item name=\"avatar\" initialValue=\"\">\n          <Uploader action={getFileUrl} />\n        </Form.Item>\n        <Form.Item\n          name=\"username\"\n          initialValue=\"i am a user\"\n          // validate rules with promise.\n          rules={[\n            {\n              validator(value) {\n                if (!value) {\n                  return Promise.reject('username is required!')\n                }\n                return Promise.resolve()\n              }\n            }\n          ]}\n        >\n          <Input placeholder=\"username\" />\n        </Form.Item>\n        <Form.Item\n          name=\"password\"\n          initialValue=\"\"\n          // multiple validate rules.\n          rules={[\n            {\n              async validator(value) {\n                if (value.length <= 4) {\n                  // async function be allow to throw 'explain'. its equal to return Promise.reject('explain').\n                  throw 'password length is greater than 4 digits!'\n                }\n              }\n            },\n            (form) => ({\n              async validator(value) {\n                const enPattern = new RegExp('^[a-z]+$', 'i')\n                if (!enPattern.test(value)) {\n                  return Promise.reject('password must consist of alphabets!')\n                }\n              }\n            }),\n            ({ getFieldValue, setFieldsValue }) => ({\n              async validator(value) {\n                // fields linkage\n                const confirmPasswordValue = getFieldValue('confirmPassword')\n                if (value !== confirmPasswordValue) {\n                  setFieldsValue({ confirmPassword: '' })\n                }\n              }\n            })\n          ]}\n        >\n          <Input placeholder=\"password\" type=\"password\" />\n        </Form.Item>\n        <Form.Item\n          name=\"confirmPassword\"\n          initialValue=\"\"\n          // dynamic validate rules.\n          rules={[\n            check\n              ? ({ getFieldValue }) => ({\n                  async validator(value) {\n                    if (value !== getFieldValue('password')) {\n                      return Promise.reject('Twice inputs are not equal!')\n                    }\n                  }\n                })\n              : {\n                  // it is equal to validate() { return Promise.resolve() }.\n                  async validator() {}\n                }\n          ]}\n        >\n          <Input placeholder=\"confirm password\" type=\"password\" />\n        </Form.Item>\n        <Form.Item name=\"selfIntroduction\" initialValue=\"\">\n          <Input.Textarea placeholder=\"self introduction\" />\n        </Form.Item>\n\n        <Form.Item name=\"switch\" initialValue={false}>\n          <Switch description=\"switch\" />\n        </Form.Item>\n        <Form.Item name=\"lang\" initialValue=\"en-US\">\n          <Select description=\"language\">\n            <Select.Option value=\"en-US\">English</Select.Option>\n            <Select.Option value=\"es-ES\">Español</Select.Option>\n            <Select.Option value=\"ru-RU\">русский</Select.Option>\n            <Select.Option value=\"zh-CN\">简体中文</Select.Option>\n            <Select.Option value=\"zh-TW\">繁體中文</Select.Option>\n          </Select>\n        </Form.Item>\n        <Form.Item name=\"agree\" initialValue={false}>\n          <CheckBox>checking means agree to xxxxxxx terms</CheckBox>\n        </Form.Item>\n        <Form.Item\n          name=\"fruit\"\n          initialValue={[\n            { name: 'apple', value: false },\n            { name: 'pear', value: true },\n            { name: 'orange', value: true }\n          ]}\n        >\n          <CheckBox.Group\n            options={[\n              { label: 'Apple', name: 'apple' },\n              { label: 'Pear', name: 'pear' },\n              { label: 'Orange', name: 'orange' }\n            ]}\n          />\n        </Form.Item>\n        <Form.Item name=\"frontendLibary\" initialValue=\"angular\">\n          <Radio.Group>\n            <Radio value=\"angular\">Angular</Radio>\n            <Radio value=\"react\">React</Radio>\n            <Radio value=\"vue\">Vue</Radio>\n          </Radio.Group>\n        </Form.Item>\n        <Button type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </div>\n  )\n}\n`\n\nexport default function FormExample() {\n\tconst color = React.useContext(ThemeContext)\n\tconst [visible, toggle] = useVisible(false)\n\n\tconst [form] = Form.useForm()\n\tconst handleFinsh = (values) => {\n\t\tconsole.log('submit finshed values:', values)\n\t}\n\tconst handleFail = (errors) => {\n\t\tconsole.error('submit failed errors:', errors)\n\t}\n\tconst handleValuesChange = (values) => {\n\t\tconsole.log('values changed', values)\n\t}\n\tconst [check, setCheck] = React.useState(true)\n\tconst handleToggle = () => {\n\t\tsetCheck((oldCheck) => !oldCheck)\n\t}\n\tconst getFileUrl = async (data) => {\n\t\t// do some async request and fetch file url.\n\t\t// example:\n\t\t// const res = await fakeApi(data)\n\t\t// return res.url\n\t\treturn 'https://iph.href.lu/200x200?fg=666666&bg=cccccc'\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<Button color={color} light onClick={toggle}>\n\t\t\t\t{visible ? 'Hide' : 'Show'} Form Example\n\t\t\t</Button>\n\t\t\t<Collapse in={visible}>\n\t\t\t\t<Example code={codeExample}>\n\t\t\t\t\t<div style={{ width: 400, padding: 16 }}>\n\t\t\t\t\t\t<CheckBox\n\t\t\t\t\t\t\tstyle={{ marginBottom: 16 }}\n\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\tvalue={check}\n\t\t\t\t\t\t\tonValueChange={handleToggle}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tPassword confirm verify is necessary?\n\t\t\t\t\t\t</CheckBox>\n\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\tform={form}\n\t\t\t\t\t\t\tonFinsh={handleFinsh}\n\t\t\t\t\t\t\tonFail={handleFail}\n\t\t\t\t\t\t\tonValuesChange={handleValuesChange}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<Form.Item name=\"avatar\" initialValue=\"\">\n\t\t\t\t\t\t\t\t<Uploader action={getFileUrl} />\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\tname=\"username\"\n\t\t\t\t\t\t\t\tinitialValue=\"i am a user\"\n\t\t\t\t\t\t\t\t// validate rules with promise.\n\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tvalidator(value) {\n\t\t\t\t\t\t\t\t\t\t\tif (!value) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject('username is required!')\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.resolve()\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Input color={color} placeholder=\"username\" />\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\tname=\"password\"\n\t\t\t\t\t\t\t\tinitialValue=\"\"\n\t\t\t\t\t\t\t\t// multiple validate rules.\n\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tasync validator(value) {\n\t\t\t\t\t\t\t\t\t\t\tif (value.length <= 4) {\n\t\t\t\t\t\t\t\t\t\t\t\t// async function be allow to throw 'explain'. its equal to return Promise.reject('explain').\n\t\t\t\t\t\t\t\t\t\t\t\tthrow 'password length is greater than 4 digits!'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t(form) => ({\n\t\t\t\t\t\t\t\t\t\tasync validator(value) {\n\t\t\t\t\t\t\t\t\t\t\tconst enPattern = new RegExp('^[a-z]+$', 'i')\n\t\t\t\t\t\t\t\t\t\t\tif (!enPattern.test(value)) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject('password must consist of alphabets!')\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t({ getFieldValue, setFieldsValue }) => ({\n\t\t\t\t\t\t\t\t\t\tasync validator(value) {\n\t\t\t\t\t\t\t\t\t\t\t// fields linkage\n\t\t\t\t\t\t\t\t\t\t\tconst confirmPasswordValue = getFieldValue('confirmPassword')\n\t\t\t\t\t\t\t\t\t\t\tif (value !== confirmPasswordValue) {\n\t\t\t\t\t\t\t\t\t\t\t\tsetFieldsValue({ confirmPassword: '' })\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Input color={color} placeholder=\"password\" type=\"password\" />\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\tname=\"confirmPassword\"\n\t\t\t\t\t\t\t\tinitialValue=\"\"\n\t\t\t\t\t\t\t\t// dynamic validate rules.\n\t\t\t\t\t\t\t\trules={[\n\t\t\t\t\t\t\t\t\tcheck\n\t\t\t\t\t\t\t\t\t\t? ({ getFieldValue }) => ({\n\t\t\t\t\t\t\t\t\t\t\t\tasync validator(value) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tif (value !== getFieldValue('password')) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject('Twice inputs are not equal!')\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t\t// it is equal to validate() { return Promise.resolve() }.\n\t\t\t\t\t\t\t\t\t\t\t\tasync validator() {}\n\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<Input color={color} placeholder=\"confirm password\" type=\"password\" />\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item name=\"selfIntroduction\" initialValue=\"\">\n\t\t\t\t\t\t\t\t<Input.Textarea color={color} placeholder=\"self introduction\" />\n\t\t\t\t\t\t\t</Form.Item>\n\n\t\t\t\t\t\t\t<Form.Item name=\"switch\" initialValue={false}>\n\t\t\t\t\t\t\t\t<Switch color={color} description=\"switch\" />\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item name=\"lang\" initialValue=\"en-US\">\n\t\t\t\t\t\t\t\t<Select color={color} description=\"language\">\n\t\t\t\t\t\t\t\t\t<Select.Option value=\"en-US\">English</Select.Option>\n\t\t\t\t\t\t\t\t\t<Select.Option value=\"es-ES\">Español</Select.Option>\n\t\t\t\t\t\t\t\t\t<Select.Option value=\"ru-RU\">русский</Select.Option>\n\t\t\t\t\t\t\t\t\t<Select.Option value=\"zh-CN\">简体中文</Select.Option>\n\t\t\t\t\t\t\t\t\t<Select.Option value=\"zh-TW\">繁體中文</Select.Option>\n\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item name=\"agree\" initialValue={false}>\n\t\t\t\t\t\t\t\t<CheckBox color={color}>checking means agree to xxxxxxx terms</CheckBox>\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item\n\t\t\t\t\t\t\t\tname=\"fruit\"\n\t\t\t\t\t\t\t\tinitialValue={[\n\t\t\t\t\t\t\t\t\t{ name: 'apple', value: false },\n\t\t\t\t\t\t\t\t\t{ name: 'pear', value: true },\n\t\t\t\t\t\t\t\t\t{ name: 'orange', value: true }\n\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<CheckBox.Group\n\t\t\t\t\t\t\t\t\tcolor={color}\n\t\t\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t\t\t{ label: 'Apple', name: 'apple' },\n\t\t\t\t\t\t\t\t\t\t{ label: 'Pear', name: 'pear' },\n\t\t\t\t\t\t\t\t\t\t{ label: 'Orange', name: 'orange' }\n\t\t\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Form.Item name=\"frontendLibary\" initialValue=\"angular\">\n\t\t\t\t\t\t\t\t<Radio.Group color={color}>\n\t\t\t\t\t\t\t\t\t<Radio value=\"angular\">Angular</Radio>\n\t\t\t\t\t\t\t\t\t<Radio value=\"react\">React</Radio>\n\t\t\t\t\t\t\t\t\t<Radio value=\"vue\">Vue</Radio>\n\t\t\t\t\t\t\t\t</Radio.Group>\n\t\t\t\t\t\t\t</Form.Item>\n\t\t\t\t\t\t\t<Button type=\"submit\" color={color}>\n\t\t\t\t\t\t\t\tSubmit\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t</div>\n\t\t\t\t</Example>\n\t\t\t</Collapse>\n\t\t</>\n\t)\n}\n","/Users/pb/code/sylas-react-ui/example/src/examples/ListExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/LoadingExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/MenuExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/PopupExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/TabsExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/examples/TagExample.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/hooks.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/index.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/react-app-env.d.ts",[],"/Users/pb/code/sylas-react-ui/example/src/setupTests.ts",[],"/Users/pb/code/sylas-react-ui/example/src/examples/Example.tsx",[],"/Users/pb/code/sylas-react-ui/example/src/markdown/Markdown.tsx",["69","70"],"import React from 'react'\nimport MarkdownToJSX from 'markdown-to-jsx'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { github } from 'react-syntax-highlighter/dist/esm/styles/hljs'\nimport './index.css'\n\nfunction getlang(str) {\n  if (typeof str != 'string') return str\n  const [prefix, lang, ...rest] = str.split('-')\n\n  switch (lang) {\n    case 'js':\n      return 'javascript'\n    default:\n      return lang\n  }\n}\n\nconst Fragment = (props) => <>{props.children}</>\n\nconst Img = (props) => (\n  <span className=\"pic\">\n    <img alt=\"\" {...props} />\n  </span>\n)\n\nconst Pre = (props) => <pre className=\"code_wrapper\">{props.children}</pre>\n\n// 防止 SyntaxHighlighter 大量重渲染\nconst Highlight = React.memo<any>((props) => {\n  const { language, children } = props\n  return (\n    <SyntaxHighlighter PreTag={Fragment} style={github} language={language}>\n      {children}\n    </SyntaxHighlighter>\n  )\n})\n\nfunction Code(props) {\n  const { children, className } = props\n  return <Highlight language={getlang(className)}>{children}</Highlight>\n}\n\nfunction Markdown(props) {\n  return (\n    <div className=\"markdown_wrapper\">\n      <MarkdownToJSX\n        options={{\n          disableParsingRawHTML: true,\n          overrides: {\n            code: Code,\n            pre: Pre,\n            img: Img\n          }\n        }}\n      >\n        {props.children}\n      </MarkdownToJSX>\n    </div>\n  )\n}\n\nexport default Markdown\n",{"ruleId":"71","severity":1,"message":"72","line":271,"column":13,"nodeType":"73","messageId":"74","endLine":271,"endColumn":62},{"ruleId":"75","severity":1,"message":"76","line":9,"column":10,"nodeType":"77","messageId":"78","endLine":9,"endColumn":16},{"ruleId":"75","severity":1,"message":"79","line":9,"column":27,"nodeType":"77","messageId":"78","endLine":9,"endColumn":31},"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","@typescript-eslint/no-unused-vars","'prefix' is assigned a value but never used.","Identifier","unusedVar","'rest' is assigned a value but never used."]